(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{400:function(t,a,s){"use strict";s.r(a);var n=s(17),p=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("如何把 App 截图合成一张长截图？")]),t._v(" "),a("p",[t._v("简单思路介绍：\n长截图不能将几张截图简单的拼凑起来，需要通过找到各个截图中的相同部分合并下一个截图，不断重复，最终合成一张长图。这里合并两张图时需要根据相同区域的高度去进行图片的位移，然后让两张图的相同区域刚好重叠在一起，这样便完成了图片合并的操作。")]),t._v(" "),a("h2",{attrs:{id:"有效区域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有效区域"}},[t._v("#")]),t._v(" 有效区域")]),t._v(" "),a("p",[t._v("在对 App 截屏时会发现滚动到一些中间楼层时，一般情况下「顶部导航栏」与「底部导航栏」都是固定不变的内容，以及一些浮动的元素，会跟着用户的滑动而滑动，如图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img12.360buyimg.com/img/jfs/t1/257506/23/5752/138634/67729388Fa4cfb890/9976cfdf089aa602.png",alt:"图 1"}})]),t._v(" "),a("p",[t._v("这是某电商 App 上的一张截图，可以看到「顶部导航栏」与「底部导航栏」都是固定的，同时还有一些「会场浮层」固定在右下角的位置。")]),t._v(" "),a("p",[t._v("这些区域是每张截图不变的内容，合并的过程需要将它们都忽略掉，于是乎有效区域就只有中间的绿色区域。我们可以把绿色区域抽象理解成一个 App 视口，在对图片进行拼接的时候，只需要截取视口内容里的部分。")]),t._v(" "),a("h2",{attrs:{id:"滚动截屏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#滚动截屏"}},[t._v("#")]),t._v(" 滚动截屏")]),t._v(" "),a("p",[t._v("由于视口高度（有效区域高度）限制，每次滚动的高度必须要小于视口高度，不然无法找到各个截图的相同部分，也就无法合并截图。当我们确定了视口高度以及相同区域的高度，也就确定了滚动高度，如图：\n"),a("img",{attrs:{src:"https://img20.360buyimg.com/img/jfs/t1/258815/24/5760/65988/677293b0Fa0b00e15/a47e21f747233185.png",alt:"图 2"}})]),t._v(" "),a("p",[t._v("这里从某电商 App 上截取了四张手机截图，尝试将它们合成一张图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img11.360buyimg.com/img/jfs/t1/257223/23/5513/253361/677293c8Fbb4b3dff/560b9fdaa97688bb.png",alt:"图 3"}})]),t._v(" "),a("h2",{attrs:{id:"裁剪图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#裁剪图片"}},[t._v("#")]),t._v(" 裁剪图片")]),t._v(" "),a("p",[t._v("裁剪图片主要是将截图的有效区域裁剪出来，用于图片拼接，这里只需要根据视口的位置和高度进行裁剪即可，需要注意的是第一张图需要保留有效区域以上的区域，最后一张图保留有效区域以下的区域。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img13.360buyimg.com/img/jfs/t1/255989/23/6716/159104/677293ddF4f5bef2f/ea98875226fbbe3b.png",alt:"图 4"}})]),t._v(" "),a("h2",{attrs:{id:"特征匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特征匹配"}},[t._v("#")]),t._v(" 特征匹配")]),t._v(" "),a("p",[t._v("前面提到拼合图片需要找到两张图片的相同区域，根据相同区域匹配并计算出两张图片重合区域的高度，拿到重合区域高度就可以通过平移位置将图片重叠在一起。")]),t._v(" "),a("p",[t._v("如何查找图像的相同区域？这里使用了"),a("strong",[t._v("特征匹配")]),t._v("。特征匹配是一种在计算机视觉和图像处理领域中常用的技术，旨在识别和匹配不同图像中的相似特征。常用的算法有"),a("strong",[t._v("SIFT")]),t._v("、"),a("strong",[t._v("SURF")]),t._v("、"),a("strong",[t._v("ORB")]),t._v("。在这里我们使用"),a("strong",[t._v("SIFT")]),t._v("（Scale-Invariant Feature Transform）算法，它的特点是匹配精度高，非常适合我们这个场景。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("sift "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SIFT_create"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nkeypoints1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptors1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("detectAndCompute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gray1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gray1_mask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nkeypoints2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptors2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sift"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("detectAndCompute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gray2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gray2_mask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在这里，对两个图像进行 SIFT 特征点检测，"),a("code",[t._v("gray1")]),t._v("和"),a("code",[t._v("gray2")]),t._v("分别对应前后两张图（灰度图），得到"),a("code",[t._v("descriptors1")]),t._v("和"),a("code",[t._v("descriptors2")]),t._v("两张图片的描述符。同时，可以通过传入"),a("code",[t._v("gray1_mask")]),t._v("和"),a("code",[t._v("gray2_mask")]),t._v("（也就是 gray1 和 gray2 的 mask） 缩小检测范围，提高检测效率：\n"),a("img",{attrs:{src:"https://img13.360buyimg.com/img/jfs/t1/253546/29/6760/165369/677293f0F37384f72/db19d499b290a2d4.png",alt:"图 5"}})]),t._v(" "),a("p",[t._v("接着进行特征点匹配：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 BFMatcher（暴力匹配器） 进行特征匹配")]),t._v("\nbf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BFMatcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cv2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NORM_L2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" crossCheck"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmatches "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("descriptors1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptors2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://img14.360buyimg.com/img/jfs/t1/258763/3/5754/387664/6772942eF7b736e4e/e0aa80639c79a55c.png",alt:"图 6"}})]),t._v(" "),a("h2",{attrs:{id:"图像变换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图像变换"}},[t._v("#")]),t._v(" 图像变换")]),t._v(" "),a("p",[t._v("通过特征匹配得到了精确的匹配点，那要后如何计算重叠区域的高度呢？这里我们可以根据两张图的匹配点估计出一个平移变换矩阵，通过矩阵直接进行平移变换。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 估计平移矩阵")]),t._v("\nH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mask "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("estimateAffinePartial2D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("points2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" points1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("得到矩阵"),a("code",[t._v("H")]),t._v("，应用到图 2 中：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应用平移变换")]),t._v("\nheight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" image1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shape"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warpAffine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("image2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" H"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" image2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shape"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("最后将图 1 拼合到矩阵变换后的图 2 中：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("height"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" image1\n")])])]),a("p",[a("img",{attrs:{src:"https://img12.360buyimg.com/img/jfs/t1/268454/6/5608/98848/6772944fF26819426/2804522beb4ce72c.png",alt:"图 7"}})]),t._v(" "),a("p",[t._v("最后，便得到了一张拼接好的图，此时只要将图片底部的黑边去掉即得到最后的拼接图。")]),t._v(" "),a("h2",{attrs:{id:"最终结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最终结果"}},[t._v("#")]),t._v(" 最终结果")]),t._v(" "),a("p",[t._v("完成以上图片拼接流程后，将上一次拼接好的图和下一张截图继续按照以上流程拼合，拼合到最后一张底部图即完成该页面的长截图生成。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img14.360buyimg.com/img/jfs/t1/256249/2/6820/633108/67729464F758718f6/c0144cb45c2c8b9e.png",alt:"图 8"}})])])}),[],!1,null,null,null);a.default=p.exports}}]);